datatype Atoms = WAIT|SUS|DONE

(* EXPORT START *)
    
(* Calculates the nth Fibonacci number*)
fun fib_raft cb n =
    (* O(2^n) recursive solution*)
    let fun loop n f =
        if n <= 1 then 
            (* Pass n to function*)
            f n
        (* Add suspended states to ensure computation when doing recursion*)
        else ([], SUS, fn () =>
            loop (n - 1) (fn x => ([], SUS, fn () =>
                loop (n - 2) (fn y => 
                    (* Return sum of x and y to function *)
                    f (x + y)))))
    (* Send result of recursive loop to cb *)
    in loop n (fn x => ([(cb, x)], WAIT, fib_input))
end

and fib_input x = case x of 
(* Compute the nth fibonacci number if input matches *)
(callback, n) => fib_raft callback n
(* Ignores otherwise*)
| _ => ([], WAIT, fib_input)

(* EXPORT END *)
